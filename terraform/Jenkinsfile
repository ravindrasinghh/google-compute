pipeline {
    parameters {
       choice(name: 'environment', choices: ['dev','qa','stage','prod'], description: 'Setting this will deploy the services on selected environment')    
       choice(name: 'branch_name', choices: ['master','development'], description: 'Select branch name')
       booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }
    agent any 
    options {
      buildDiscarder(logRotator(numToKeepStr: "10"))
  }
    stages {
        stage ('checkout') {
            steps {
                script{
                    git (credentialsId: 'git', url: 'https://github.com/ravindrasinghh/google-compute',branch: '${branch_name}')
                }
            }
        }
        stage ('terraform init') {
            steps {
                dir("terraform") {
                withCredentials([file(credentialsId:'1d0e6475-b226-4cf3-879b-4e1e89877599', variable: 'kinetic-guild-274011')]) {
                }    
                sh 'terraform init -input=false'
                sh 'pwd;cd /var/lib/jenkins/workspace/private/terraform'
                sh 'rm -rf .terraform/*'
                }
            }
        }
        stage ('terraform plan') {
            steps {
                dir("terraform") {
                sh 'terraform init'
                sh 'terraform workspace select ${environment} || terraform workspace new ${environment}' 
                sh 'terraform plan -input=false -out tfplan'
                sh 'terraform show -no-color tfplan > tfplan.txt'
                }
            }
        }
        stage ('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    def plan = readFile '/var/lib/jenkins/workspace/private/terraform/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }
        stage ('terraform apply') {
            steps {
                dir("terraform") {
                sh 'ls'
                }
            }
        }
    }
}
